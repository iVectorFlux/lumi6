name: Production Deployment Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security & Quality Checks
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd lumi6-backend && npm ci
          cd ../src && npm ci

      - name: Run ESLint
        run: |
          cd lumi6-backend && npm run lint
          cd ../src && npm run lint

      - name: Security audit
        run: |
          cd lumi6-backend && npm audit --audit-level high
          cd ../src && npm audit --audit-level high

      - name: Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: OWASP ZAP security scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: 'http://localhost:4000'

  # Testing Suite
  test:
    runs-on: ubuntu-latest
    needs: security-scan
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: lumi6_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd lumi6-backend && npm ci
          cd ../src && npm ci

      - name: Set up test database
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/lumi6_test
        run: |
          cd lumi6-backend
          npx prisma migrate deploy
          npx prisma db seed

      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/lumi6_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret
        run: |
          cd lumi6-backend
          npm run test:coverage

      - name: Run frontend tests
        run: |
          cd src
          npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./lumi6-backend/coverage/lcov.info,./src/coverage/lcov.info

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Start services
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Run load tests
        run: |
          npm install -g artillery
          artillery run tests/load/api-load-test.yml

      - name: Run stress tests
        run: |
          artillery run tests/load/stress-test.yml

      - name: Cleanup
        run: docker-compose -f docker-compose.test.yml down

  # Build & Push Images
  build:
    runs-on: ubuntu-latest
    needs: [security-scan, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./lumi6-backend
          file: ./lumi6-backend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}-backend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}-frontend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Database Migration
  migrate:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: cd lumi6-backend && npm ci

      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          cd lumi6-backend
          npx prisma migrate deploy

  # Production Deployment
  deploy:
    runs-on: ubuntu-latest
    needs: [build, migrate, performance-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://lumi6.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to ECS
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster lumi6-production \
            --service lumi6-backend \
            --force-new-deployment

          aws ecs update-service \
            --cluster lumi6-production \
            --service lumi6-frontend \
            --force-new-deployment

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster lumi6-production \
            --services lumi6-backend lumi6-frontend

  # Post-deployment Tests
  smoke-tests:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run smoke tests
        env:
          API_BASE_URL: https://api.lumi6.com
        run: |
          npm install -g newman
          newman run tests/postman/smoke-tests.json \
            --env-var "baseUrl=$API_BASE_URL"

      - name: Check health endpoints
        run: |
          curl -f https://api.lumi6.com/health
          curl -f https://lumi6.com

      - name: Run basic API tests
        run: |
          npm install
          npm run test:integration:production

  # Monitoring & Alerts Setup
  monitoring:
    runs-on: ubuntu-latest
    needs: smoke-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Set up monitoring alerts
        env:
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
        run: |
          # Configure Datadog monitors
          curl -X POST "https://api.datadoghq.com/api/v1/monitor" \
            -H "Content-Type: application/json" \
            -H "DD-API-KEY: $DATADOG_API_KEY" \
            -d '{
              "type": "metric alert",
              "query": "avg(last_5m):avg:system.cpu.user{service:lumi6} > 80",
              "name": "High CPU Usage - Lumi6",
              "message": "CPU usage is high on Lumi6 servers",
              "options": {
                "thresholds": {"critical": 80}
              }
            }'

      - name: Update status page
        env:
          STATUSPAGE_API_KEY: ${{ secrets.STATUSPAGE_API_KEY }}
        run: |
          # Update deployment status
          curl -X PATCH "https://api.statuspage.io/v1/pages/YOUR_PAGE_ID/incidents/YOUR_INCIDENT_ID" \
            -H "Authorization: OAuth $STATUSPAGE_API_KEY" \
            -d "incident[status]=resolved&incident[body]=Deployment completed successfully"

  # Rollback Plan
  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [deploy, smoke-tests]
    
    steps:
      - name: Rollback deployment
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          # Get previous task definition
          PREVIOUS_TASK_DEF=$(aws ecs describe-services \
            --cluster lumi6-production \
            --services lumi6-backend \
            --query 'services[0].deployments[1].taskDefinition' \
            --output text)
          
          # Update service to previous version
          aws ecs update-service \
            --cluster lumi6-production \
            --service lumi6-backend \
            --task-definition $PREVIOUS_TASK_DEF

      - name: Notify team of rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'Production deployment failed and was rolled back!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 